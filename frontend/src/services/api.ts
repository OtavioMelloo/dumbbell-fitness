import axios from "axios";

// Interfaces para tipos de dados
interface Cartao {
  aluno: number;
  numero_cartao: string;
  nome_titular: string;
  data_validade: string;
  bandeira_cartao: string;
}

interface Matricula {
  aluno: number;
  ativo: boolean;
  data_criacao: string;
}

interface Aluno {
  id: number;
  [key: string]: unknown;
}

/**
 * Configura√ß√£o da inst√¢ncia do Axios para comunica√ß√£o com a API
 *
 * Esta inst√¢ncia √© configurada com:
 * - URL base da API (Render para produ√ß√£o)
 * - Headers padr√£o para requisi√ß√µes JSON
 * - Interceptor para adicionar token de autentica√ß√£o automaticamente
 * - Configura√ß√µes que podem ser reutilizadas em todo o projeto
 */
const api = axios.create({
  // URL base da API - Render para produ√ß√£o
  baseURL: "https://dumbbell-fitness-backend-wg7d.onrender.com/api/v1",

  // Headers padr√£o para todas as requisi√ß√µes
  headers: {
    "Content-Type": "application/json", // Indica que o corpo da requisi√ß√£o √© JSON
  },

  // Timeout aumentado para 30 segundos (padr√£o √© 0 = sem timeout)
  timeout: 30000,

  // Configura√ß√µes adicionais para melhorar a estabilidade
  maxRedirects: 5,
  validateStatus: (status) => status < 500, // Aceita qualquer status < 500
});

/**
 * Tipo para informa√ß√µes do usu√°rio
 */
export interface UserInfo {
  id: number;
  username: string;
  email: string;
  first_name?: string;
  last_name?: string;
  // Adicione outros campos conforme necess√°rio
}

/**
 * Interceptor para adicionar token de autentica√ß√£o automaticamente
 * Executa antes de cada requisi√ß√£o para incluir o token no header Authorization
 */
api.interceptors.request.use(
  (config) => {
    // Log para debug do m√©todo HTTP
    // console.log("üîß Interceptor - M√©todo HTTP:", config.method?.toUpperCase());
    // console.log("üîß Interceptor - URL:", config.url);
    // console.log(
    //   "üîß Interceptor - URL completa:",
    //   (config.baseURL || "") + (config.url || "")
    // );

    // Busca o token do localStorage
    const token = localStorage.getItem("drf_token");
    // console.log("üîß Interceptor - Token encontrado:", token ? "Sim" : "N√£o");

    // Se existe um token, adiciona no header Authorization
    if (token) {
      config.headers.Authorization = `Token ${token}`; // DRF usa "Token" ao inv√©s de "Bearer"
      // console.log("üîß Interceptor - Header Authorization adicionado");
    } else {
      // console.log(
      //   "üîß Interceptor - Nenhum token encontrado, requisi√ß√£o sem autentica√ß√£o"
      // );
    }

    // console.log("üîß Interceptor - Headers finais:", config.headers);
    return config;
  },
  (error) => {
    // console.error("üîß Interceptor - Erro na requisi√ß√£o:", error);
    return Promise.reject(error);
  }
);

/**
 * Interceptor para tratar respostas da API
 * TEMPOR√ÅRIO: Desabilitado para evitar loops de redirecionamento
 */
api.interceptors.response.use(
  (response) => {
    return response;
  },
  (error) => {
    // console.log(
    //   "üö® Interceptor - Erro da API:",
    //   error.response?.status,
    //   error.config?.url
    // );

    // TEMPOR√ÅRIO: Desabilitado redirecionamento autom√°tico
    // if (error.response?.status === 401) {
    //   console.log("üîë Erro 401 - Removendo dados de autentica√ß√£o");
    //   removeAuthData();
    //   if (
    //     typeof window !== "undefined" &&
    //     window.location.pathname !== "/login" &&
    //     window.location.pathname !== "/" &&
    //     !window.location.pathname.startsWith("/sobre") &&
    //     !window.location.pathname.startsWith("/matricula")
    //   ) {
    //     console.log("üîÑ Redirecionando para login");
    //     window.location.href = "/login";
    //   }
    // }

    return Promise.reject(error);
  }
);

/**
 * Fun√ß√£o para salvar dados de autentica√ß√£o (token e informa√ß√µes do usu√°rio)
 * @param token - Token DRF recebido do login
 * @param userInfo - Informa√ß√µes do usu√°rio
 */
export const setAuthData = (token: string, userInfo: UserInfo) => {
  // Verifica se est√° no lado do cliente antes de acessar localStorage
  if (typeof window === "undefined") {
    return;
  }
  localStorage.setItem("drf_token", token);
  localStorage.setItem("user_info", JSON.stringify(userInfo));
};

/**
 * Fun√ß√£o para remover dados de autentica√ß√£o (logout)
 */
export const removeAuthData = () => {
  // Verifica se est√° no lado do cliente antes de acessar localStorage
  if (typeof window === "undefined") {
    return;
  }
  localStorage.removeItem("drf_token");
  localStorage.removeItem("user_info");
};

/**
 * Fun√ß√£o para obter informa√ß√µes do usu√°rio logado
 * @returns Informa√ß√µes do usu√°rio ou null se n√£o estiver logado
 */
export const getUserInfo = (): UserInfo | null => {
  // Verifica se est√° no lado do cliente antes de acessar localStorage
  if (typeof window === "undefined") {
    return null;
  }

  const userInfoStr = localStorage.getItem("user_info");
  if (userInfoStr) {
    try {
      return JSON.parse(userInfoStr);
    } catch {
      // console.error("Erro ao parsear informa√ß√µes do usu√°rio:", error);
      return null;
    }
  }
  return null;
};

/**
 * Fun√ß√£o para verificar se o usu√°rio est√° autenticado
 * @returns true se existe um token v√°lido
 */
export const isAuthenticated = (): boolean => {
  // Verifica se est√° no lado do cliente antes de acessar localStorage
  if (typeof window === "undefined") {
    return false;
  }
  return !!localStorage.getItem("drf_token");
};

/**
 * Fun√ß√£o para obter o token atual
 * @returns Token atual ou null se n√£o existir
 */
export const getToken = (): string | null => {
  // Verifica se est√° no lado do cliente antes de acessar localStorage
  if (typeof window === "undefined") {
    return null;
  }
  return localStorage.getItem("drf_token");
};

/**
 * Fun√ß√£o para fazer login e salvar dados de autentica√ß√£o
 * @param credentials - Credenciais de login (username/email e password)
 * @returns Promise com dados de autentica√ß√£o
 */
export const loginUser = async (credentials: {
  username: string;
  password: string;
}) => {
  try {
    // Faz login na API DRF usando a URL correta
    const response = await axios.post(
      "https://dumbbell-fitness-backend-wg7d.onrender.com/api-token-auth/",
      credentials
    );

    const { token } = response.data;

    // Busca dados completos do usu√°rio da API
    let userInfo: UserInfo;
    try {
      const userResponse = await axios.get(
        "https://dumbbell-fitness-backend-wg7d.onrender.com/api/v1/auth/user/",
        {
          headers: {
            Authorization: `Token ${token}`,
          },
        }
      );

      const userData = userResponse.data;
      userInfo = {
        id: userData.id,
        username: userData.username,
        email: userData.email,
        first_name: userData.first_name,
        last_name: userData.last_name,
      };
    } catch {
      // console.error("Erro ao buscar dados do usu√°rio:", userError);
      // Se n√£o conseguir buscar dados completos, usa dados b√°sicos
      userInfo = {
        id: 0,
        username: credentials.username,
        email: credentials.username, // Assume que username √© email
      };
    }

    // Salva dados de autentica√ß√£o
    setAuthData(token, userInfo);

    return { token, userInfo };
  } catch {
    // console.error("Erro no login:", error);
    throw new Error("Erro no login");
  }
};

/**
 * Fun√ß√£o para fazer logout
 */
export const logoutUser = () => {
  removeAuthData();
  // TEMPOR√ÅRIO: Desabilitado redirecionamento autom√°tico
  // if (typeof window !== "undefined") {
  //   window.location.href = "/login";
  // }
};

/**
 * Fun√ß√£o para buscar dados do usu√°rio atual da API
 * @returns Promise com informa√ß√µes atualizadas do usu√°rio
 */
export const fetchCurrentUser = async (): Promise<UserInfo> => {
  try {
    // Busca dados do usu√°rio da API
    const response = await api.get("/auth/user/");
    const userData = response.data;

    // Atualiza os dados no localStorage
    const userInfo: UserInfo = {
      id: userData.id,
      username: userData.username,
      email: userData.email,
      first_name: userData.first_name || "",
      last_name: userData.last_name || "",
    };

    // Salva os dados atualizados
    localStorage.setItem("user_info", JSON.stringify(userInfo));

    return userInfo;
  } catch {
    // console.warn("API n√£o dispon√≠vel, usando dados do localStorage:", error);

    // Se n√£o conseguir buscar da API, tenta usar dados do localStorage
    const cachedUser = getUserInfo();
    if (cachedUser) {
      // console.log("Usando dados em cache do usu√°rio:", cachedUser);
      return cachedUser;
    }

    // Se n√£o h√° dados em cache, lan√ßa erro para for√ßar logout
    throw new Error("Usu√°rio n√£o encontrado");
  }
};

/**
 * Fun√ß√£o para verificar se o usu√°rio tem matr√≠cula ativa
 * @param userId - ID do usu√°rio
 * @returns Promise com true se tem matr√≠cula ativa, false caso contr√°rio
 */
export const verificarMatriculaAtiva = async (): Promise<boolean> => {
  try {
    // console.log("üîç Verificando matr√≠cula ativa para usu√°rio:", userId);

    // Busca o usu√°rio logado para obter o email
    const userInfo = getUserInfo();
    if (!userInfo) {
      // console.log("‚ùå Usu√°rio n√£o autenticado");
      return false;
    }

    // console.log("üë§ Dados do usu√°rio:", userInfo);

    // Busca o aluno pelo email do usu√°rio
    const alunoUrl = `https://dumbbell-fitness-backend-wg7d.onrender.com/api/v1/cadastros/alunos/?email=${userInfo.email}`;
    // console.log("üîó URL para buscar aluno:", alunoUrl);

    const token = getToken();
    // console.log("üîë Token dispon√≠vel:", !!token);

    const alunoResponse = await axios.get(alunoUrl, {
      headers: {
        Authorization: `Token ${token}`,
      },
    });

    // console.log("üìã Resposta da busca por aluno:", alunoResponse.data);

    if (alunoResponse.data.results && alunoResponse.data.results.length > 0) {
      const aluno = alunoResponse.data.results[0];
      // console.log("üë§ Aluno encontrado:", aluno.id);

      // Busca matr√≠culas ativas do aluno
      const matriculaUrl = `/planos/matriculas/?aluno=${aluno.id}&ativo=true`;
      // console.log("üîó URL para buscar matr√≠culas:", matriculaUrl);

      const matriculaResponse = await api.get(matriculaUrl);

      // console.log("üìã Matr√≠culas encontradas:", matriculaResponse.data);
      const temMatricula =
        matriculaResponse.data.results &&
        matriculaResponse.data.results.length > 0;
      // console.log("‚úÖ Resultado final - Tem matr√≠cula:", temMatricula);
      return temMatricula;
    }

    // console.log("‚ùå Aluno n√£o encontrado");
    return false;
  } catch {
    // console.error("‚ùå Erro ao verificar matr√≠cula ativa:", error);
    return false;
  }
};

/**
 * Fun√ß√£o para criar um cart√£o de cr√©dito
 * @param dadosCartao - Dados do cart√£o
 * @returns Promise com resposta da API
 */
export const criarCartao = async (dadosCartao: {
  numero_cartao: string;
  nome_titular: string;
  data_validade: string;
  cvv: string;
  bandeira_cartao: string;
}) => {
  try {
    // Busca o aluno associado ao usu√°rio logado
    const userInfo = getUserInfo();
    if (!userInfo) {
      throw new Error("Usu√°rio n√£o autenticado");
    }

    const aluno = await buscarAlunoPorUsuario(userInfo.id);

    // Verifica se j√° existe um cart√£o com os mesmos dados para este aluno
    try {
      const cartoesResponse = await api.get(`/cadastros/cartoes/`);
      const cartoesExistentes = cartoesResponse.data;

      // Procura por um cart√£o com os mesmos dados
      const cartaoExistente = cartoesExistentes.find(
        (cartao: Cartao) =>
          cartao.aluno === aluno.id &&
          cartao.numero_cartao ===
            dadosCartao.numero_cartao.replace(/\s/g, "") &&
          cartao.nome_titular === dadosCartao.nome_titular &&
          cartao.data_validade === dadosCartao.data_validade &&
          cartao.bandeira_cartao === dadosCartao.bandeira_cartao
      );

      if (cartaoExistente) {
        // console.log(
        //   "‚úÖ Cart√£o j√° existe, retornando cart√£o existente:",
        //   cartaoExistente
        // );
        return cartaoExistente;
      }
    } catch {
      // console.warn("Erro ao verificar cart√µes existentes, criando novo cart√£o:", error);
    }

    // Adiciona o campo aluno aos dados do cart√£o
    const dadosCompletos = {
      ...dadosCartao,
      aluno: aluno.id,
    };

    // console.log("üîÑ Enviando dados do cart√£o para API:", dadosCompletos);
    const response = await api.post("/cadastros/cartoes/", dadosCompletos);
    // console.log("‚úÖ Cart√£o criado com sucesso:", response.data);
    return response.data;
  } catch (error) {
    // console.error("‚ùå Erro ao criar cart√£o:", error);

    // Log detalhado do erro
    if (error && typeof error === "object" && "response" in error) {
      const axiosError = error as {
        response?: { status?: number; data?: unknown };
        config?: { url?: string; data?: unknown; headers?: unknown };
      };
      console.error("üìä Status do erro:", axiosError.response?.status);
      console.error("üìã Dados do erro:", axiosError.response?.data);
      console.error(
        "üìã Mensagem completa do erro:",
        JSON.stringify(axiosError.response?.data, null, 2)
      );
      console.error("üîó URL que falhou:", axiosError.config?.url);
      console.error("üì§ Dados enviados:", axiosError.config?.data);
      console.error("üì§ Headers enviados:", axiosError.config?.headers);
    }

    throw error;
  }
};

/**
 * Fun√ß√£o para criar uma matr√≠cula
 * @param dadosMatricula - Dados da matr√≠cula
 * @returns Promise com resposta da API
 */
export const criarMatricula = async (dadosMatricula: {
  plano: number;
  forma_pagamento: string;
  cartao: number;
  aluno?: number; // Campo opcional, ser√° adicionado automaticamente
}) => {
  try {
    // Busca o aluno associado ao usu√°rio logado
    const userInfo = getUserInfo();
    if (!userInfo) {
      throw new Error("Usu√°rio n√£o autenticado");
    }

    const aluno = await buscarAlunoPorUsuario(userInfo.id);

    // Verifica se j√° existe uma matr√≠cula ativa para este aluno
    try {
      const matriculasResponse = await api.get(`/cadastros/matriculas/`);
      const matriculasExistentes = matriculasResponse.data;

      // Procura por uma matr√≠cula ativa do mesmo aluno
      const matriculaExistente = matriculasExistentes.find(
        (matricula: Matricula) => matricula.aluno === aluno.id
      );

      if (matriculaExistente) {
        // Retorna um erro especial que ser√° tratado no frontend
        const error = new Error("MATRICULA_EXISTENTE");
        (error as { matriculaExistente?: boolean }).matriculaExistente = true;
        throw error;
      }
    } catch (error) {
      if (error instanceof Error && error.message === "MATRICULA_EXISTENTE") {
        throw error; // Re-lan√ßa o erro especial
      }
      // console.warn(
      //   "Erro ao verificar matr√≠culas existentes, continuando com cria√ß√£o:",
      //   error
      // );
    }

    // Substitui o ID do usu√°rio pelo ID do aluno
    const dadosCompletos = {
      ...dadosMatricula,
      aluno: aluno.id,
    };

    // console.log("üîÑ Enviando dados da matr√≠cula para API:", dadosCompletos);
    const response = await api.post("/cadastros/matriculas/", dadosCompletos);
    // console.log("‚úÖ Matr√≠cula criada com sucesso:", response.data);
    return response.data;
  } catch (error) {
    // console.error("‚ùå Erro ao criar matr√≠cula:", error);

    // Log detalhado do erro
    if (error && typeof error === "object" && "response" in error) {
      const axiosError = error as {
        response?: { status?: number; data?: unknown };
        config?: { url?: string; data?: unknown };
      };
      console.error("üìä Status do erro:", axiosError.response?.status);
      console.error("üìã Dados do erro:", axiosError.response?.data);
      console.error(
        "üìã Mensagem completa do erro:",
        JSON.stringify(axiosError.response?.data, null, 2)
      );
      console.error("üîó URL que falhou:", axiosError.config?.url);
      console.error("üì§ Dados enviados:", axiosError.config?.data);
    }

    throw error;
  }
};

/**
 * Fun√ß√£o para solicitar redefini√ß√£o de senha
 * @param email - Email do usu√°rio
 * @returns Promise com resposta da API
 */
export const solicitarRedefinicaoSenha = async (email: string) => {
  try {
    const response = await axios.post(
      "https://dumbbell-fitness-backend-wg7d.onrender.com/api/v1/auth/password-reset/",
      { email }
    );
    return response.data;
  } catch (error) {
    // console.error("Erro ao solicitar redefini√ß√£o de senha:", error);
    throw error;
  }
};

/**
 * Fun√ß√£o para redefinir senha com token
 * @param token - Token de redefini√ß√£o
 * @param newPassword - Nova senha
 * @returns Promise com resposta da API
 */
export const redefinirSenha = async (token: string, newPassword: string) => {
  try {
    const response = await axios.post(
      "https://dumbbell-fitness-backend-wg7d.onrender.com/api/v1/auth/password-reset/confirm/",
      {
        token,
        new_password: newPassword,
      }
    );
    return response.data;
  } catch (error) {
    // console.error("Erro ao redefinir senha:", error);
    throw error;
  }
};

/**
 * Fun√ß√£o para enviar dados do cart√£o para a API (DEPRECATED)
 * @param dadosCartao - Dados do cart√£o e plano selecionado
 * @returns Promise com resposta da API
 * @deprecated Use criarCartao and criarMatricula instead
 */
export const enviarDadosCartao = async (dadosCartao: {
  numero_cartao: string;
  nome_cartao: string;
  data_validade: string;
  cvv: string;
  bandeira: string;
  plano_id: number;
  plano_nome: string;
  plano_preco: number;
}) => {
  try {
    const response = await api.post("/cadastros/cartoes/", dadosCartao);
    return response.data;
  } catch (error) {
    // console.error("Erro ao enviar dados do cart√£o:", error);
    throw error;
  }
};

/**
 * Fun√ß√£o para buscar aluno pelo nome
 * @param nome - Nome do aluno
 * @returns Promise com dados do aluno
 */
export const buscarAlunoPorNome = async (nome: string) => {
  try {
    const response = await api.get(`/cadastros/alunos/?nome=${nome}`);
    return response.data;
  } catch (error) {
    // console.error("Erro ao buscar aluno por nome:", error);
    throw error;
  }
};

/**
 * Fun√ß√£o para buscar aluno por email
 * @param email - Email do aluno
 * @returns Promise com dados do aluno
 */
export const buscarAlunoPorEmail = async (email: string) => {
  try {
    const response = await api.get(`/cadastros/alunos/?email=${email}`);
    return response.data;
  } catch (error) {
    // console.error("Erro ao buscar aluno por email:", error);
    throw error;
  }
};

/**
 * Fun√ß√£o para atualizar o perfil do usu√°rio
 * @param userData - Dados do usu√°rio para atualizar
 * @returns Promise com dados atualizados do usu√°rio
 */
export const atualizarPerfil = async (userData: {
  nome?: string;
  email?: string;
  sexo?: string;
  data_nascimento?: string;
  peso?: string;
  altura?: string;
  endereco?: number;
}) => {
  try {
    // Buscar o usu√°rio atual
    const currentUser = getUserInfo();
    // console.log("Usu√°rio atual:", currentUser);

    if (!currentUser) {
      throw new Error("Usu√°rio n√£o encontrado");
    }

    // Tentar atualizar via API
    try {
      // Buscar o aluno pelo nome
      if (!currentUser.first_name) {
        throw new Error("Nome do usu√°rio n√£o dispon√≠vel");
      }

      const alunosResponse = await buscarAlunoPorNome(currentUser.first_name);
      // console.log("Resposta da busca por nome:", alunosResponse);

      if (!alunosResponse || alunosResponse.length === 0) {
        throw new Error("Aluno n√£o encontrado na API");
      }

      const aluno = alunosResponse[0]; // Pega o primeiro resultado
      // console.log("Aluno encontrado:", aluno);

      const url = `/cadastros/alunos/${aluno.id}/`;
      // console.log("URL da requisi√ß√£o:", url);
      // console.log("Dados sendo enviados:", userData);

      const response = await api.patch(url, userData);
      return response.data;
    } catch {
      // console.warn("API n√£o dispon√≠vel, simulando atualiza√ß√£o:", apiError);

      // Simular atualiza√ß√£o salvando no localStorage
      const updatedUser: UserInfo = {
        ...currentUser,
        first_name: userData.nome || currentUser.first_name || "",
        email: userData.email || currentUser.email,
      };

      // Salvar dados atualizados no localStorage
      localStorage.setItem("user_info", JSON.stringify(updatedUser));

      // Retornar dados simulados
      return {
        id: updatedUser.id,
        nome: updatedUser.first_name,
        email: updatedUser.email,
        sexo: userData.sexo,
        data_nascimento: userData.data_nascimento,
        peso: userData.peso,
        altura: userData.altura,
        message: "Perfil atualizado (modo offline)",
      };
    }
  } catch (error) {
    console.error("Erro ao atualizar perfil:", error);
    throw error;
  }
};

/**
 * Fun√ß√£o para buscar dados do aluno espec√≠fico
 * @param alunoId - ID do aluno
 * @returns Promise com dados do aluno
 */
export const buscarAluno = async (alunoId: number) => {
  try {
    const response = await api.get(`/cadastros/alunos/${alunoId}/`);
    return response.data;
  } catch (error) {
    console.error("Erro ao buscar aluno:", error);
    throw error;
  }
};

/**
 * Fun√ß√£o para listar todos os alunos (para debug)
 * @returns Promise com lista de alunos
 */
export const listarAlunos = async () => {
  try {
    const response = await api.get("/cadastros/alunos/");
    console.log("Lista de alunos:", response.data);

    // Mostrar detalhes de cada aluno
    response.data.forEach((aluno: Aluno, index: number) => {
      console.log(`Aluno ${index + 1} completo:`, aluno);
      console.log(`Campos do Aluno ${index + 1}:`, Object.keys(aluno));
    });

    return response.data;
  } catch (error) {
    console.error("Erro ao listar alunos:", error);
    throw error;
  }
};

/**
 * Fun√ß√£o para buscar exerc√≠cios da API
 * @returns Promise com lista de exerc√≠cios
 */
export const buscarExercicios = async () => {
  try {
    const response = await api.get("/exercicios/");
    console.log("Exerc√≠cios encontrados:", response.data);

    // Se a API retornou dados, processar e retornar
    if (response.data && response.data.length > 0) {
      // Processar os dados da API para garantir que todos os campos existam
      const exerciciosProcessados = response.data.map(
        (exercicio: {
          id: number;
          nome: string;
          descricao: string;
          categoria?: string;
          grupo_muscular?: string;
          equipamento?: string | null;
        }) => ({
          id: exercicio.id,
          nome: exercicio.nome,
          descricao: exercicio.descricao,
          categoria: exercicio.categoria || "N√£o definido",
          grupo_muscular: exercicio.grupo_muscular || "N√£o definido",
          equipamento: exercicio.equipamento || null,
        })
      );

      return exerciciosProcessados;
    } else {
      // Se a API retornou array vazio, usar exerc√≠cios padr√£o
      console.warn("API retornou array vazio, usando exerc√≠cios padr√£o");
      return getExerciciosPadrao();
    }
  } catch (error) {
    console.warn("API n√£o dispon√≠vel, retornando exerc√≠cios padr√£o:", error);
    return getExerciciosPadrao();
  }
};

/**
 * Fun√ß√£o auxiliar para retornar exerc√≠cios padr√£o
 */
const getExerciciosPadrao = () => {
  return [
    {
      id: 1,
      nome: "Supino Reto",
      descricao:
        "Exerc√≠cio fundamental para desenvolvimento do peitoral. Deite no banco, segure a barra com pegada pronada e execute o movimento controladamente.",
      categoria: "Muscula√ß√£o",
      grupo_muscular: "Peitoral",
      equipamento: "Barra e Banco",
    },
    {
      id: 2,
      nome: "Agachamento",
      descricao:
        "Exerc√≠cio composto que trabalha principalmente quadr√≠ceps, gl√∫teos e core. Posicione os p√©s na largura dos ombros e agache mantendo o peito erguido.",
      categoria: "Muscula√ß√£o",
      grupo_muscular: "Pernas",
      equipamento: "Barra ou Peso Corporal",
    },
    {
      id: 3,
      nome: "Levantamento Terra",
      descricao:
        "Exerc√≠cio completo para for√ßa e estabilidade. Mantenha a coluna neutra e levante a barra do ch√£o at√© a altura dos quadris.",
      categoria: "Muscula√ß√£o",
      grupo_muscular: "Costas",
      equipamento: "Barra",
    },
    {
      id: 4,
      nome: "Flex√£o de Bra√ßo",
      descricao:
        "Exerc√≠cio funcional para tr√≠ceps e peitoral. Mantenha o corpo alinhado e execute o movimento controladamente.",
      categoria: "Funcional",
      grupo_muscular: "Tr√≠ceps",
      equipamento: "Peso Corporal",
    },
    {
      id: 5,
      nome: "Puxada na Frente",
      descricao:
        "Exerc√≠cio para desenvolvimento das costas. Puxe a barra em dire√ß√£o ao peito, mantendo os cotovelos pr√≥ximos ao corpo.",
      categoria: "Muscula√ß√£o",
      grupo_muscular: "Costas",
      equipamento: "Pulley",
    },
    {
      id: 6,
      nome: "Desenvolvimento",
      descricao:
        "Exerc√≠cio para ombros e tr√≠ceps. Levante os pesos acima da cabe√ßa, mantendo o controle do movimento.",
      categoria: "Muscula√ß√£o",
      grupo_muscular: "Ombros",
      equipamento: "Halteres ou Barra",
    },
    {
      id: 7,
      nome: "Corrida na Esteira",
      descricao:
        "Exerc√≠cio cardiovascular que melhora a resist√™ncia e queima calorias. Mantenha uma postura ereta e respire naturalmente.",
      categoria: "Cardio",
      grupo_muscular: "Pernas",
      equipamento: "Esteira",
    },
    {
      id: 8,
      nome: "Bicicleta Ergom√©trica",
      descricao:
        "Exerc√≠cio cardiovascular de baixo impacto. Ajuste a altura do banco e mantenha uma cad√™ncia constante.",
      categoria: "Cardio",
      grupo_muscular: "Pernas",
      equipamento: "Bicicleta Ergom√©trica",
    },
  ];
};

/**
 * Fun√ß√£o para buscar exerc√≠cios para cria√ß√£o de treinos
 * @returns Promise com lista de exerc√≠cios
 */
export const buscarExerciciosParaTreino = async () => {
  try {
    const response = await api.get("/exercicios/");
    console.log("Exerc√≠cios para treino encontrados:", response.data);
    return response.data;
  } catch (error) {
    console.warn("API n√£o dispon√≠vel, retornando exerc√≠cios padr√£o:", error);
    return getExerciciosPadrao();
  }
};

/**
 * Interface para dados do treino
 */
export interface DadosTreino {
  nome?: string;
  aluno: number;
  objetivo: string;
  disponibilidade: string;
  observacao?: string;
}

/**
 * Interface para exerc√≠cio do treino
 */
export interface ExercicioTreino {
  exercicio: number;
  series: number;
  repeticoes: number;
  carga?: number;
  descanso: number;
}

/**
 * Interface para cria√ß√£o completa do treino
 */
export interface CriarTreinoData {
  treino: DadosTreino;
  exercicios: ExercicioTreino[];
}

/**
 * Fun√ß√£o para criar um novo treino
 * @param dadosTreino - Dados do treino e exerc√≠cios
 * @returns Promise com resposta da API
 */
export const criarTreino = async (dadosTreino: CriarTreinoData) => {
  try {
    console.log("üîÑ Criando treino...");
    console.log("üìã Dados recebidos:", dadosTreino);
    console.log("üìã Tipo dos dados:", typeof dadosTreino);
    console.log(
      "üìã Estrutura dos dados:",
      JSON.stringify(dadosTreino, null, 2)
    );

    // Verificar se os dados est√£o corretos
    if (!dadosTreino.treino) {
      console.error("‚ùå dadosTreino.treino est√° undefined");
      throw new Error("Dados do treino inv√°lidos");
    }

    if (!dadosTreino.exercicios || !Array.isArray(dadosTreino.exercicios)) {
      console.error(
        "‚ùå dadosTreino.exercicios est√° inv√°lido:",
        dadosTreino.exercicios
      );
      throw new Error("Dados dos exerc√≠cios inv√°lidos");
    }

    console.log("üìã Dados do treino:", dadosTreino.treino);
    console.log("üìã Quantidade de exerc√≠cios:", dadosTreino.exercicios.length);

    // Corrigir payload para o formato esperado pelo backend
    // O backend espera os dados da rela√ß√£o ExercicioTreino com series, repeticoes, carga, descanso
    const payload = {
      ...dadosTreino.treino,
      exercicios: dadosTreino.exercicios.map((ex) => ({
        exercicio: ex.exercicio,
        series: ex.series,
        repeticoes: ex.repeticoes,
        carga: ex.carga,
        descanso: ex.descanso,
      })),
    };

    console.log("üì§ Payload final:", payload);
    console.log("üì§ Payload JSON:", JSON.stringify(payload, null, 2));
    console.log("üîó URL da requisi√ß√£o: /treinos/");
    console.log("üîß M√©todo HTTP: POST");

    const response = await api.post("/treinos/", payload);
    console.log("‚úÖ Treino criado com sucesso:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao criar treino:", error);

    // Log detalhado do erro
    if (error && typeof error === "object" && "response" in error) {
      const axiosError = error as {
        response?: { status?: number; data?: unknown };
        config?: { url?: string; data?: unknown; headers?: unknown };
      };
      console.error("üìä Status do erro:", axiosError.response?.status);
      console.error("üìã Dados do erro:", axiosError.response?.data);
      console.error(
        "üìã Mensagem completa do erro:",
        JSON.stringify(axiosError.response?.data, null, 2)
      );
      console.error("üîó URL que falhou:", axiosError.config?.url);
      console.error("üì§ Dados enviados:", axiosError.config?.data);
      console.error("üì§ Headers enviados:", axiosError.config?.headers);
    }

    throw error;
  }
};

/**
 * Interface para dados completos do treino (incluindo ID)
 */
export interface TreinoCompleto {
  id: number;
  nome?: string;
  aluno: number;
  objetivo: string;
  disponibilidade: string;
  observacao?: string;
  exercicios: ExercicioTreino[];
  data_criacao?: string;
  data_atualizacao?: string;
}

/**
 * Fun√ß√£o para buscar todos os treinos do usu√°rio logado
 * @returns Promise com lista de treinos
 */
export const buscarTreinos = async (): Promise<TreinoCompleto[]> => {
  try {
    const response = await api.get("/treinos/");
    console.log("Treinos encontrados:", response.data);

    // Converter valores de disponibilidade para exibi√ß√£o completa
    const treinosConvertidos = response.data.map((treino: TreinoCompleto) => ({
      ...treino,
      disponibilidade: converterDisponibilidadeParaExibicao(
        treino.disponibilidade
      ),
    }));

    console.log("Treinos com disponibilidade convertida:", treinosConvertidos);
    return treinosConvertidos;
  } catch (error) {
    console.error("Erro ao buscar treinos:", error);
    throw error;
  }
};

/**
 * Fun√ß√£o para buscar um treino espec√≠fico por ID
 * @param treinoId - ID do treino
 * @returns Promise com dados do treino
 */
export const buscarTreinoPorId = async (
  treinoId: number
): Promise<TreinoCompleto> => {
  try {
    const response = await api.get(`/treinos/${treinoId}/`);
    console.log("Treino encontrado:", response.data);

    // Converter valor de disponibilidade para exibi√ß√£o completa
    const treinoConvertido = {
      ...response.data,
      disponibilidade: converterDisponibilidadeParaExibicao(
        response.data.disponibilidade
      ),
    };

    console.log("Treino com disponibilidade convertida:", treinoConvertido);
    return treinoConvertido;
  } catch (error) {
    console.error("Erro ao buscar treino:", error);
    throw error;
  }
};

/**
 * Fun√ß√£o para atualizar um treino existente
 * @param treinoId - ID do treino
 * @param dadosTreino - Dados atualizados do treino
 * @returns Promise com resposta da API
 */
export const atualizarTreino = async (
  treinoId: number,
  dadosTreino: CriarTreinoData
) => {
  try {
    console.log("üîç Atualizando treino ID:", treinoId);
    console.log("üìã Dados recebidos:", dadosTreino);

    // Corrigir payload para o formato esperado pelo backend
    // O backend espera os dados da rela√ß√£o ExercicioTreino com series, repeticoes, carga, descanso
    const payload = {
      ...dadosTreino.treino,
      exercicios: dadosTreino.exercicios.map((ex) => ({
        exercicio: ex.exercicio,
        series: ex.series,
        repeticoes: ex.repeticoes,
        carga: ex.carga,
        descanso: ex.descanso,
      })),
    };

    console.log("üì§ Payload sendo enviado:", payload);
    console.log("üîó URL da requisi√ß√£o:", `/treinos/${treinoId}/`);
    console.log("üîß M√©todo HTTP: PATCH");

    const response = await api.patch(`/treinos/${treinoId}/`, payload);
    console.log("‚úÖ Treino atualizado com sucesso:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao atualizar treino:", error);

    // Log detalhado do erro
    if (error && typeof error === "object" && "response" in error) {
      const axiosError = error as {
        response?: { status?: number; data?: unknown };
        config?: { url?: string; data?: unknown };
      };
      console.error("üìä Status do erro:", axiosError.response?.status);
      console.error("üìã Dados do erro:", axiosError.response?.data);
      console.error(
        "üìã Mensagem completa do erro:",
        JSON.stringify(axiosError.response?.data, null, 2)
      );
      console.error("üîó URL que falhou:", axiosError.config?.url);
      console.error("üì§ Dados enviados:", axiosError.config?.data);
    }

    throw error;
  }
};

/**
 * Fun√ß√£o para deletar um treino
 * @param treinoId - ID do treino
 * @returns Promise com resposta da API
 */
export const deletarTreino = async (treinoId: number) => {
  try {
    console.log("Deletando treino:", treinoId);

    const response = await api.delete(`/treinos/${treinoId}/`);
    console.log("Treino deletado com sucesso");
    return response.data;
  } catch (error) {
    console.error("Erro ao deletar treino:", error);
    throw error;
  }
};

/**
 * Fun√ß√£o para buscar aluno pelo ID do usu√°rio
 * @param userId - ID do usu√°rio
 * @returns Promise com dados do aluno
 */
export const buscarAlunoPorUsuario = async (userId: number) => {
  try {
    console.log("üîç Buscando aluno por usu√°rio ID:", userId);
    const response = await api.get(`/cadastros/alunos/?user=${userId}`);
    console.log("üìã Resposta da API de alunos:", response.data);

    if (response.data && response.data.length > 0) {
      const aluno = response.data[0];
      console.log("‚úÖ Aluno encontrado:", aluno);
      return aluno; // Retorna o primeiro resultado
    }

    console.log("‚ùå Nenhum aluno encontrado para o usu√°rio ID:", userId);
    throw new Error("Aluno n√£o encontrado para este usu√°rio");
  } catch (error) {
    console.error("‚ùå Erro ao buscar aluno por usu√°rio:", error);
    throw error;
  }
};

/**
 * Fun√ß√£o para buscar informa√ß√µes detalhadas da matr√≠cula do usu√°rio
 * @param userId - ID do usu√°rio
 * @returns Promise com informa√ß√µes da matr√≠cula e plano
 */
export const buscarMatriculaDetalhada = async (userId: number) => {
  try {
    console.log("üîç Buscando matr√≠cula detalhada para usu√°rio:", userId);

    // Busca o usu√°rio logado para obter o email
    const userInfo = getUserInfo();
    if (!userInfo) {
      console.log("‚ùå Usu√°rio n√£o autenticado");
      return null;
    }

    // Busca o aluno pelo email do usu√°rio
    const alunoUrl = `https://dumbbell-fitness-backend-wg7d.onrender.com/api/v1/cadastros/alunos/?email=${userInfo.email}`;
    const token = getToken();

    const alunoResponse = await axios.get(alunoUrl, {
      headers: {
        Authorization: `Token ${token}`,
      },
    });

    if (alunoResponse.data.results && alunoResponse.data.results.length > 0) {
      const aluno = alunoResponse.data.results[0];
      console.log("üë§ Aluno encontrado:", aluno.id);

      // Busca matr√≠culas ativas do aluno com detalhes do plano
      const matriculaUrl = `/planos/matriculas/?aluno=${aluno.id}&ativo=true&expand=plano`;
      const matriculaResponse = await api.get(matriculaUrl);

      console.log("üìã Matr√≠culas encontradas:", matriculaResponse.data);

      if (
        matriculaResponse.data.results &&
        matriculaResponse.data.results.length > 0
      ) {
        const matricula = matriculaResponse.data.results[0];
        console.log("‚úÖ Matr√≠cula ativa encontrada:", matricula);
        return matricula;
      }
    }

    console.log("‚ùå Nenhuma matr√≠cula ativa encontrada");
    return null;
  } catch (error) {
    console.error("‚ùå Erro ao buscar matr√≠cula detalhada:", error);
    return null;
  }
};

/**
 * Fun√ß√£o para buscar matr√≠cula ativa do aluno logado diretamente da rota /cadastros/matriculas/
 * @returns Promise com a matr√≠cula ativa mais recente ou null
 */
export const buscarMatriculaPorAluno = async () => {
  try {
    const userInfo = getUserInfo();
    if (!userInfo) {
      throw new Error("Usu√°rio n√£o autenticado");
    }
    // Buscar o aluno pelo userId
    const aluno = await buscarAlunoPorUsuario(userInfo.id);
    if (!aluno || !aluno.id) {
      throw new Error("Aluno n√£o encontrado");
    }
    // Buscar matr√≠culas do aluno
    const response = await api.get(`/cadastros/matriculas/?aluno=${aluno.id}`);
    const matriculas = response.data.results || response.data;
    // Filtrar matr√≠cula ativa mais recente
    const matriculaAtiva = matriculas
      .filter((m: Matricula) => m.ativo)
      .sort(
        (a: Matricula, b: Matricula) =>
          new Date(b.data_criacao).getTime() -
          new Date(a.data_criacao).getTime()
      )[0];

    if (matriculaAtiva && matriculaAtiva.plano) {
      // Mapear ID do plano para nome
      let nomePlano = "Plano Desconhecido";
      if (matriculaAtiva.plano === 1) {
        nomePlano = "Dumbbell";
      } else if (matriculaAtiva.plano === 2) {
        nomePlano = "Starter";
      }

      // Retornar matr√≠cula com nome do plano mapeado
      return {
        ...matriculaAtiva,
        plano: {
          id: matriculaAtiva.plano,
          nome: nomePlano,
        },
      };
    }

    return matriculaAtiva || null;
  } catch (error) {
    console.error("Erro ao buscar matr√≠cula do aluno:", error);
    return null;
  }
};

// =============================================================================
// FUN√á√ïES UTILIT√ÅRIAS PARA CONVERS√ÉO DE DADOS
// =============================================================================

/**
 * Converte valores de disponibilidade de formato abreviado para completo
 * @param valor - Valor abreviado (D, A, S) ou completo
 * @returns Valor completo para exibi√ß√£o
 */
export const converterDisponibilidadeParaExibicao = (valor: string): string => {
  const mapeamento: { [key: string]: string } = {
    D: "Di√°rio",
    A: "Alternado",
    S: "Semanal",
    Di√°rio: "Di√°rio",
    Alternado: "Alternado",
    Semanal: "Semanal",
  };
  return mapeamento[valor] || valor;
};

/**
 * Converte valores de disponibilidade de formato completo para abreviado
 * @param valor - Valor completo (Di√°rio, Alternado, Semanal) ou abreviado
 * @returns Valor abreviado para API
 */
export const converterDisponibilidadeParaAPI = (valor: string): string => {
  const mapeamento: { [key: string]: string } = {
    Di√°rio: "D",
    Alternado: "A",
    Semanal: "S",
    D: "D",
    A: "A",
    S: "S",
  };
  return mapeamento[valor] || valor;
};

/**
 * Fun√ß√£o para salvar a √∫ltima rotina finalizada espec√≠fica do usu√°rio
 * @param completedRoutine - Dados da rotina finalizada
 * @param userId - ID do usu√°rio
 */
export const salvarUltimaRotinaFinalizada = (
  completedRoutine: unknown,
  userId?: number
) => {
  if (typeof window === "undefined") {
    return;
  }

  const user = userId || getUserInfo()?.id || "anonymous";
  const storageKey = `lastCompletedRoutine_${user}`;
  localStorage.setItem(storageKey, JSON.stringify(completedRoutine));
};

/**
 * Fun√ß√£o para obter a √∫ltima rotina finalizada espec√≠fica do usu√°rio
 * @param userId - ID do usu√°rio (opcional, usa o usu√°rio logado se n√£o fornecido)
 * @returns Dados da √∫ltima rotina finalizada ou null
 */
export const obterUltimaRotinaFinalizada = (userId?: number) => {
  if (typeof window === "undefined") {
    return null;
  }

  const user = userId || getUserInfo()?.id || "anonymous";
  const storageKey = `lastCompletedRoutine_${user}`;
  const lastCompleted = localStorage.getItem(storageKey);

  if (lastCompleted) {
    try {
      return JSON.parse(lastCompleted);
    } catch (error) {
      console.error("Erro ao parsear √∫ltima rotina finalizada:", error);
      return null;
    }
  }

  return null;
};

/**
 * Fun√ß√£o para limpar a √∫ltima rotina finalizada espec√≠fica do usu√°rio
 * @param userId - ID do usu√°rio (opcional, usa o usu√°rio logado se n√£o fornecido)
 */
export const limparUltimaRotinaFinalizada = (userId?: number) => {
  if (typeof window === "undefined") {
    return;
  }

  const user = userId || getUserInfo()?.id || "anonymous";
  const storageKey = `lastCompletedRoutine_${user}`;
  localStorage.removeItem(storageKey);
};

// =============================================================================
// CONFIGURA√á√ÉO DO AXIOS
// =============================================================================

export default api;
